image: gitlab.cosmian.com:5000/core/ci-rust:latest

variables:
  CARGO_HOME: ${CI_PROJECT_DIR}/.cargo/
  SCCACHE_DIR: ${CI_PROJECT_DIR}/.cache/sccache
  COSMIAN_SERVER_URL: http://localhost:9998
  KMS_PUBLIC_PATH: /tmp
  KMS_PRIVATE_PATH: /tmp
  KMS_SHARED_PATH: /tmp
  # Postgres for `cloudproof_js` tests
  POSTGRES_DB: app_db
  POSTGRES_USER: app_user
  POSTGRES_PASSWORD: password
  PGPASSWORD: password
  # Postgrest for `cloudproof_js` tests
  PGRST_SERVER_HOST: localhost
  PGRST_SERVER_PORT: 3000
  PGRST_DB_URI: postgres://app_user:password@localhost:5432/app_db
  PGRST_DB_SCHEMA: public
  PGRST_DB_ANON_ROLE: app_user
  PGRST_OPENAPI_SERVER_PROXY_URI: http://localhost:3000

stages:
  - prebuild
  - build
  - test
  - package
  - publish

rustfmt:
  stage: prebuild
  cache: {}
  script:
    - cargo +stable format

doc:
  stage: prebuild
  cache: {}
  script:
    - cargo doc --all-features

clippy:
  stage: prebuild
  cache: {}
  script:
    # all features activated
    - cargo clippy --all-targets -- -D warnings
    # no feature activated
    - cargo clippy-all

# Security check
cargo_security_check:
  stage: prebuild
  cache: {}
  script:
    - cargo outdated -wR
    - cargo audit --deny warnings
  allow_failure: true

# Is crate publishable
cargo_prepublish:
  stage: prebuild
  script:
    - cargo publish --dry-run
  allow_failure: true

#
# Build base
#
.base_compile: &base_compile
  stage: build
  cache:
    key: "${CI_COMMIT_REF_SLUG}"
    policy: pull
    paths:
      - $CARGO_HOME
      - $SCCACHE_DIR
  before_script:
    - sccache -s

benchmarks:
  <<: *base_compile
  script:
    - cargo bench --all-features
  when: manual

build_x86_64:
  <<: *base_compile
  script:
    - cargo build --release --features ffi --target x86_64-unknown-linux-gnu
    - cargo test --release --all-features --target x86_64-unknown-linux-gnu
    - cbindgen . -c cbindgen.toml | grep -v \#include | uniq >target/${CI_PROJECT_NAME}.h

build_x86_64_centos7:
  <<: *base_compile
  image: gitlab.cosmian.com:5000/core/ci-rust-glibc-2.17
  script:
    - cargo build --release --features ffi --target x86_64-unknown-linux-gnu
    - cargo test --release --features ffi --target x86_64-unknown-linux-gnu
    - cbindgen . -c cbindgen.toml | grep -v \#include | uniq >target/${CI_PROJECT_NAME}.h
  artifacts:
    paths:
      - target/x86_64-unknown-linux-gnu/release/*.so
      - target/*.h
    expire_in: 3 mos

build_wasm:
  <<: *base_compile
  image: gitlab.cosmian.com:5000/core/ci-npm:latest
  script:
    - wasm-pack build -d pkg/bundler --release --features wasm_bindgen
    - wasm-pack test --node --features wasm_bindgen --lib
    - wasm-pack build -d pkg/nodejs --target nodejs --release --features wasm_bindgen
  artifacts:
    paths:
      - pkg
    expire_in: 3 mos

build_windows:
  <<: *base_compile
  script:
    - cargo build --release --features ffi --target x86_64-pc-windows-gnu
    - cbindgen . -c cbindgen.toml | grep -v \#include | uniq >target/${CI_PROJECT_NAME}.h
  artifacts:
    paths:
      - target/x86_64-pc-windows-gnu/release/*.dll
      - target/*.h
    expire_in: 3 mos

build_osx:
  stage: build
  image: joseluisq/rust-linux-darwin-builder:1.64.0
  before_script:
    - cargo install cargo-lipo
    - rustup target add aarch64-apple-ios x86_64-apple-ios x86_64-apple-darwin
    - cp /root/.cargo/config "$CARGO_HOME/"
  script:
    - cargo build --release --features ffi --target x86_64-apple-darwin
    - cargo lipo --release --features ffi --allow-run-on-non-macos
  artifacts:
    paths:
      - target/x86_64-apple-darwin/release/*.dylib
      - target/universal/release/*.a
    expire_in: 3 mos

build_android:
  <<: *base_compile
  image: gitlab.cosmian.com:5000/core/ci-rust-android:latest
  script:
    - cargo ndk -t x86 -t x86_64 -t armeabi-v7a -t arm64-v8a -o jniLibs build --release --features ffi --lib
  artifacts:
    paths:
      - jniLibs
    expire_in: 3 mos

test_cloudproof_java:
  image: openjdk:8
  stage: test
  services:
    - name: gitlab.cosmian.com:5000/core/kms:2.2.0_ci
      alias: kms_ci
    - redis:latest
  before_script:
    - apt update && apt install -y maven
  script:
    - git clone https://github.com/Cosmian/cloudproof_java.git
    - cp target/x86_64-unknown-linux-gnu/release/libcosmian_${CI_PROJECT_NAME}.so cloudproof_java/src/test/resources/linux-x86-64/
    - cd cloudproof_java
    - mvn package
  allow_failure: true

test_python:
  stage: test
  script:
    - maturin build --release --features python
    - bash src/interfaces/pyo3/tests/test.sh
  artifacts:
    paths:
      - target/wheels/*.whl
    expire_in: 3 mos

test_cloudproof_js:
  image: node:16
  stage: test
  services:
    - name: postgres
      alias: db
    - name: postgrest/postgrest
      alias: server
    - redis:latest
  before_script:
    - apt update && apt install -y postgresql libpq-dev
  script:
    - git clone https://github.com/Cosmian/cloudproof_js.git
    - mkdir -p cloudproof_js/tests/wasm_lib/${CI_PROJECT_NAME}
    - cp -r pkg/nodejs/* cloudproof_js/tests/wasm_lib/${CI_PROJECT_NAME}/
    - cd cloudproof_js
    - psql -h localhost -U "$POSTGRES_USER" -d "$POSTGRES_DB" -f ./dump_db_demo.sql
    - npm install jest
    - npm test
  allow_failure: true

pack_all_artifacts:
  stage: package
  before_script:
    - apt update && apt install -y zip
  script:
    - zip -r ${CI_PROJECT_NAME}-${CI_COMMIT_TAG}-bin.zip pkg target jniLibs
  artifacts:
    paths:
      - ${CI_PROJECT_NAME}-${CI_COMMIT_TAG}-bin.zip
    expire_in: 3 mos

npm_publish:
  image: gitlab.cosmian.com:5000/core/ci-npm:latest
  stage: publish
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v\d+.\d+.\d+$/'
  script:
    - echo "//registry.npmjs.org/:_authToken=$NPM_ACCESS_TOKEN" > ~/.npmrc
    - wasm-pack build --release --features wasm_bindgen
    - wasm-pack pack
    - wasm-pack publish

cargo_publish:
  stage: publish
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v\d+.\d+.\d+$/'
  before_script:
    - apt update && apt install -y git
  script:
    - echo "[registry]" > ~/.cargo/credentials
    - echo "token = \"$CRATES_IO\"" >> ~/.cargo/credentials
    - rm -rf /tmp/${CI_PROJECT_NAME}
    - cp -rf . /tmp/${CI_PROJECT_NAME}
    - cd /tmp/${CI_PROJECT_NAME}
    - rm -rf ${CI_PROJECT_NAME}-${CI_COMMIT_TAG}-bin.zip jniLibs target
    - cargo publish --token $CRATES_IO
    - rm -rf /tmp/${CI_PROJECT_NAME}
